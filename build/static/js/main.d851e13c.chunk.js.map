{"version":3,"sources":["api.js","constants.js","utils.js","component/header.js","component/tab.js","ui/chart-ui.jsx","ui/selector-ui.jsx","component/graph-view.jsx","ui/table-ui.js","component/table-view.jsx","pages/overView.jsx","App.js","reportWebVitals.js","index.js"],"names":["getLast30Prices","time","a","fetch","type","count","json","Array","map","_i","i","Intl","NumberFormat","minimumFractionDigits","DateTimeFormat","timeStyle","hour12","style","signDisplay","maximumFractionDigits","Header","data","Card","className","xmlns","width","height","fill","viewBox","d","base","dateFormat","lastUpdate","Body","Row","last","change","percentChange","TabContainer","tabs","Tabs","defaultActiveKey","id","tab","index","Tab","eventKey","name","title","toUpperCase","component","Chart","options","highcharts","Highcharts","Select","handleChange","DropdownButton","option","Dropdown","Item","onClick","GraphView","chartOptions","text","xAxis","categories","item","series","TableComponent","Table","striped","bordered","hover","variant","headers","header","row","date","price","TableView","tableData","OverView","prices","setTime","selectTimeOptions","timeToset","tabsData","Container","fluid","App","useState","setPrices","product","setData","useEffect","set","Promise","all","useWebSocket","onOpen","sendJsonMessage","instruments","onMessage","event","handleMessage","JSON","parse","onError","console","log","shouldReconnect","closeEvent","retryOnError","reconnectAttempts","reconnectInterval","readyState","message","Object","keys","length","path","element","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d851e13c.chunk.js","sourcesContent":["import { API_URL } from \"./constants\";\r\n\r\n\r\nconst getLast30Prices = async (time) => {\r\n  return await (await fetch(`${API_URL}/api/v1/en/crypto-coin/chart/candles/${time.type}?aggregate=${time.count}&e=CCCAGG&fsym=BTC&tsym=usd&limit=30`)).json();\r\n};\r\n\r\nexport {\r\n  getLast30Prices\r\n};\r\n","const SOCKET_STATUSES = {\r\n  \"-1\": { name: \"Uninstantiated\", class: \"bg-red-500\" },\r\n  0: { name: \"Connecting\", class: \"bg-blue-500\" },\r\n  1: { name: \"Connected\", class: \"bg-green-500\" },\r\n  2: { name: \"Closing\", class: \"bg-yellow-300\" },\r\n  3: { name: \"Closed\", class: \"bg-red-500\" },\r\n};\r\n\r\nconst API_URL = \"https://www.fxempire.com\";\r\nconst WS_URL = \"wss://wstest.fxempire.com?token=btctothemoon\";\r\n\r\nconst DEFAULT_SELECTED_PRODUCT_IDS = [\"BTC-USD\", \"ETH-USD\", \"LTC-USD\"];\r\n\r\nexport { SOCKET_STATUSES, API_URL, WS_URL, DEFAULT_SELECTED_PRODUCT_IDS };\r\n","const priceFormats = [...Array(10)].map((_i, i) => new Intl.NumberFormat(\"en-US\", { minimumFractionDigits: i }));\r\nconst defaultPriceFormat = new Intl.NumberFormat(\"en-US\");\r\n\r\nconst formatPrice = (price, minimumFractionDigits) => {\r\n  return (priceFormats[minimumFractionDigits] || defaultPriceFormat).format(price);\r\n};\r\n\r\nconst defaultTimeFormat = new Intl.DateTimeFormat(\"en-US\", {\r\n  timeStyle: \"medium\",\r\n  hour12: false,\r\n});\r\n\r\nconst formatTime = (date) => {\r\n  return defaultTimeFormat.format(date);\r\n};\r\n\r\nconst defaultPercentFormat = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"percent\",\r\n  signDisplay: \"always\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nconst formatPercent = (percent) => {\r\n  return defaultPercentFormat.format(percent);\r\n};\r\n\r\nconst buildSubscribeMessage = (type,name) => {\r\n  return { type,instruments: name };\r\n};\r\n\r\nconst clamp = (value, min, max) => {\r\n  return Math.min(Math.max(value, min), max);\r\n};\r\n\r\nconst getPercentChange = (from, to) => {\r\n  const delta = to - from;\r\n  return delta / from;\r\n};\r\n\r\nexport {\r\n  formatPrice,\r\n  formatTime,\r\n  formatPercent,\r\n  buildSubscribeMessage,\r\n  clamp,\r\n  getPercentChange,\r\n};\r\n","import React from 'react';\r\n\r\nimport { Form,Button ,Col,Container,Row,Card, Alert,Badge,Modal,Table} from 'react-bootstrap';\r\nimport dateFormat, { masks } from \"dateformat\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Header = ({data}) =>{\r\n\r\nreturn(\r\n\r\n<Card>\r\n   <Card.Header className =\"d-flex justify-content-between\" >\r\n    <strong className=\"me-auto\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-currency-bitcoin\" viewBox=\"0 0 16 16\">\r\n    <path d=\"M5.5 13v1.25c0 .138.112.25.25.25h1a.25.25 0 0 0 .25-.25V13h.5v1.25c0 .138.112.25.25.25h1a.25.25 0 0 0 .25-.25V13h.084c1.992 0 3.416-1.033 3.416-2.82 0-1.502-1.007-2.323-2.186-2.44v-.088c.97-.242 1.683-.974 1.683-2.19C11.997 3.93 10.847 3 9.092 3H9V1.75a.25.25 0 0 0-.25-.25h-1a.25.25 0 0 0-.25.25V3h-.573V1.75a.25.25 0 0 0-.25-.25H5.75a.25.25 0 0 0-.25.25V3l-1.998.011a.25.25 0 0 0-.25.25v.989c0 .137.11.25.248.25l.755-.005a.75.75 0 0 1 .745.75v5.505a.75.75 0 0 1-.75.75l-.748.011a.25.25 0 0 0-.25.25v1c0 .138.112.25.25.25L5.5 13zm1.427-8.513h1.719c.906 0 1.438.498 1.438 1.312 0 .871-.575 1.362-1.877 1.362h-1.28V4.487zm0 4.051h1.84c1.137 0 1.756.58 1.756 1.524 0 .953-.626 1.45-2.158 1.45H6.927V8.539z\"/>\r\n  </svg> {data.base}</strong>\r\n    <small>{dateFormat(data.lastUpdate, \"yyyy-mm-dd h:MM:ss\")}</small>\r\n  </Card.Header>\r\n  <Card.Body>\r\n    <Row>\r\n      <p>Price: {data.last}</p>\r\n    </Row>\r\n    <Row>\r\n      <p>Change: {data.change}</p>\r\n    </Row>\r\n    <Row>\r\n      <p>Percent change: {data.percentChange}</p>\r\n    </Row>\r\n  </Card.Body>\r\n</Card>\r\n)\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Header","import React from 'react';\r\nimport { Tabs,Row,Tab} from 'react-bootstrap';\r\n\r\n\r\n\r\nconst TabContainer = ({tabs}) => {\r\n\r\n\r\n    return(\r\n\r\n        <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\r\n           \r\n            {tabs.map((tab,index) => {\r\n\r\n                return(\r\n                    <Tab eventKey={tab.name} title={tab.name.toUpperCase()} key ={index}>\r\n                        {tab.component}  \r\n                    </Tab> \r\n                )\r\n\r\n\r\n            }) }\r\n      </Tabs>\r\n    )\r\n} \r\n\r\n\r\n\r\nexport default TabContainer","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport Highcharts from 'highcharts/highstock'\r\nimport HighchartsReact from 'highcharts-react-official'\r\n\r\n\r\n\r\nconst Chart = ({options}) =>{\r\n\r\n    \r\n    return(\r\n\r\n        <HighchartsReact\r\n            highcharts={Highcharts}\r\n            options={options}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Chart","import {DropdownButton,Dropdown} from 'react-bootstrap'\r\n\r\n\r\n\r\n\r\nconst Select = ({options,handleChange}) => {\r\n\r\n\r\n\r\n    return(\r\n\r\n        <DropdownButton id=\"dropdown-basic-button\" title=\"Select Time\" className =\"m-5\">\r\n                {\r\n                    options.map(option => {\r\n                        return <Dropdown.Item onClick = {() => handleChange(option)} key = {option}>{option}</Dropdown.Item>\r\n                    })\r\n                }\r\n            \r\n      </DropdownButton>\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\nexport default Select","\r\nimport Chart from '../ui/chart-ui'\r\nimport Select from '../ui/selector-ui'\r\n\r\n\r\n\r\nconst GraphView = ({data,handleChange,options}) => {\r\n\r\n\r\n    const chartOptions = {\r\n        title: {\r\n          text: 'Last 30 Prices'\r\n        },\r\n        xAxis: {\r\n            categories: data['data'].map(item => item['Date']),\r\n        },\r\n        series: [{\r\n          data: data['data'].map(item => item['Close'])\r\n        }]\r\n      }\r\n\r\n\r\n    return(\r\n        <div>\r\n            <Select options = {options} handleChange = {handleChange}/>\r\n               <Chart options= {chartOptions}/>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default GraphView","\r\nimport { Table,Row} from 'react-bootstrap';\r\n\r\n\r\n\r\n\r\n\r\nconst TableComponent = ({data}) => {\r\n\r\n\r\n    return(\r\n        <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            {\r\n                data.headers.map(header => {\r\n                return(\r\n                    <th key = {header}>{header}</th>\r\n\r\n                )\r\n            })\r\n            }\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n         {\r\n             data.data.map(row => {\r\n                 return(\r\n                     <tr key = {row.date}>\r\n                         <td>{row.date}</td>\r\n                         <td>{row.price}</td>\r\n                    </tr>\r\n                 )\r\n             })\r\n         }\r\n\r\n        </tbody>\r\n      </Table>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default TableComponent","import TableComponent from '../ui/table-ui'\r\nimport Select from '../ui/selector-ui'\r\n\r\n\r\nconst TableView = ({data,handleChange,options}) => {\r\n\r\n\r\n\r\n    const tableData =   {\r\n                         headers:[\"Date\",\"Price\"],\r\n                         data:data['data'].map(item => {\r\n                             return {\r\n                                 date:item['Date'],\r\n                                 price:item['Close']\r\n                             }\r\n                         })\r\n                        }\r\n\r\n    return(\r\n        <div>\r\n            <Select options = {options} handleChange = {handleChange}/>\r\n            <TableComponent  data = {tableData}/>\r\n        \r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default TableView","import React from \"react\";\r\nimport Header from '../component/header'\r\nimport TabContainer from '../component/tab'\r\nimport GraphView from '../component/graph-view'\r\nimport TableView from '../component/table-view'\r\nimport { Container,Row} from 'react-bootstrap';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst OverView = ({prices,data,setTime}) =>{\r\n\r\n\r\nconst selectTimeOptions = ['1 minute', '5 minutes','1 hour', '1 week']\r\n\r\nconst handleChange = (time) => {\r\n    var timeToset = {};\r\n    if(time == '1 minute'){\r\n        timeToset={type:'histominute',count:1}\r\n    }else if(time == '5 minutes'){\r\n        timeToset = {type:'histominute',count:5}\r\n    }else if(time == '1 hour'){\r\n        timeToset = {type:'histohour',count:1}\r\n    }else if(time == '1 week'){\r\n        timeToset = {type:'histoday',count:7}\r\n    }\r\n    setTime(timeToset)\r\n}\r\n\r\nconst tabsData = [\r\n                    {\r\n                    name:\"Graph\",\r\n                    component:<GraphView data = {data}\r\n                             options = {selectTimeOptions}\r\n                             handleChange= {handleChange}/>\r\n                    },\r\n                    {\r\n                    name:\"history\",\r\n                    component:<TableView data = {data}\r\n                              options = {selectTimeOptions}\r\n                              handleChange= {handleChange}/>\r\n                    }\r\n                ]\r\n\r\nreturn (\r\n    <Container fluid className=\"d-flex algin-items-center mt-2 flex-column \">\r\n        <Row >\r\n            <Header data = {prices} />\r\n        </Row>\r\n         <Row>\r\n           <TabContainer tabs = {tabsData} />\r\n        </Row>\r\n    </Container>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default OverView","import React, { useEffect, useState } from \"react\";\n\nimport useWebSocket from \"react-use-websocket\";\nimport {\n  WS_URL,\n} from \"./constants\";\nimport {\n  getLast30Prices,\n} from \"./api\";\nimport { buildSubscribeMessage } from \"./utils\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport './App.css';\nimport Loader from \"react-loader-spinner\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport OverView from \"./pages/overView\";\n\nconst App = () => {\n  const [prices, setPrices] = useState({});\n  const [product] = useState(\"cc-btc-usd-cccagg\")\n  const [data,setData] = useState([])\n  const [time,setTime] = useState({type:'histominute',count:'1'})\n\n  useEffect(() => {\n    const set = async () => {\n      const [prices] =  await Promise.all([\n        getLast30Prices(time),\n      ]);\n      setData(prices)\n    };\n    set();\n  }, [time]);\n\n  const { sendJsonMessage, readyState } = useWebSocket(\n    WS_URL,\n    {\n      onOpen: () => {\n        sendJsonMessage(buildSubscribeMessage(\"SUBSCRIBE\", [product]));\n      },\n      onMessage: (event) => handleMessage(JSON.parse(event.data)),\n      onError: (event) => console.log(event),\n      shouldReconnect: (closeEvent) => true,\n      retryOnError: true,\n      reconnectAttempts: 50,\n      reconnectInterval: 2000,\n    },\n    \n  );\n\n  const handleMessage = (message) => {\n    console.log(message[product])\n    let data = message[product]\n    setPrices({...data});\n  };\n  const isLoaded =\n    !!prices &&\n    !!Object.keys(data).length\n\n  if (!isLoaded)\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <Loader type=\"Rings\" color=\"#00BFFF\" height={256} width={256} />\n      </div>\n    );\n  return(\n    \n    <Router>\n    <div className=\"flex flex-col h-screen\">\n      <div className=\"flex-grow flex flex-col h-full overflow-y-hidden\">\n        <Routes>\n        <Route\n          path=\"/\"\n          element={\n          <OverView\n            prices={prices}\n            data={data}\n            setTime = {setTime}\n          />\n        }\n      />\n        </Routes>\n      </div>\n    </div>\n  </Router>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}